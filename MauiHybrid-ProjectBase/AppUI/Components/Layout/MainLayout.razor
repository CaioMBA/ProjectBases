@inherits LayoutComponentBase
@implements IDisposable;

<link rel="stylesheet" href="css/Skins/@(_settingsService.currentTheme.Name).css" />

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <div class="custom_dropdown-container">
                <button class="custom_dropdown-btn" @onclick='() => ToggleDropdown("theme")'>
                    <img src="assets/images/skins/@(_settingsService.currentTheme.Icon)" />
                    @(_settingsService.currentTheme.Name)
                </button>

                @if (isSkinDropdownOpen)
                {
                    <ul class="custom_dropdown-menu">
                        @foreach (var skin in availableThemes)
                        {
                            <li @onclick='() => ChangeDropdownSelectedValue("theme", skin.Name)'>
                                <img src="assets/images/skins/@skin.Icon" />
                                <span>@skin.Name</span>
                            </li>
                        }
                    </ul>
                }
            </div>
            <div class="custom_dropdown-container">
                <button class="custom_dropdown-btn" @onclick='() => ToggleDropdown("language")'>
                    <img src="assets/images/languages/@(_settingsService.currentLanguage.LanguageFlag)" />
                    @(_settingsService.currentLanguage.LanguageName)
                </button>

                @if (isLanguageDropdownOpen)
                {
                    <ul class="custom_dropdown-menu">
                        @foreach (var language in availableLanguages)
                        {
                            <li @onclick='() => ChangeDropdownSelectedValue("language", language.LanguageCode)'>
                                <img src="assets/images/languages/@language.LanguageFlag" />
                                <span>@language.LanguageName</span>
                            </li>
                        }
                    </ul>
                }
            </div>
            <button @onclick="@(async () => await LogOut())" class="btn">@(_settingsService.currentLanguage.sidebar_logout_button)</button>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<script src="js/MainLayout.js"></script>

@code {
    private List<AppLanguageModel> availableLanguages => _settingsService.AvailableLanguages();
    private List<AppThemeModel> availableThemes => _settingsService.AvailableThemes();
    private bool isLanguageDropdownOpen = false;
    private bool isSkinDropdownOpen = false;

    private void ToggleDropdown(string ID)
    {
        switch (ID.ToLower().Trim())
        {
            case "theme":
                isSkinDropdownOpen = !isSkinDropdownOpen;
                break;

            case "language":
                isLanguageDropdownOpen = !isLanguageDropdownOpen;
                break;

            default:
                break;
        }

        UpdateUI();
    }
    private void ChangeDropdownSelectedValue(string DropdownID, string newValue)
    {
        switch (DropdownID.ToLower().Trim())
        {
            case "theme":
                _settingsService.ChangeTheme(newValue);
                break;

            case "language":
                _settingsService.ChangeLanguage(newValue);
                break;

            default:
                break;
        }

        ToggleDropdown(DropdownID);
    }

    private async Task LogOut()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)_authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null);
    }

    protected override void OnInitialized()
    {
        _settingsService.OnLanguageChanged += UpdateUI;
        _settingsService.OnThemeChanged += UpdateUI;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await _jsRuntime.InvokeVoidAsync("preventF5");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }

    private async void UpdateUI()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _settingsService.OnLanguageChanged -= UpdateUI;
        _settingsService.OnThemeChanged -= UpdateUI;
    }
}