@page "/weather"
@attribute [Authorize]

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        _settingsService.OnLanguageChanged += UpdateUI;
        _settingsService.OnThemeChanged += UpdateUI;
        _refreshViewState.PropertyChanged += OnPropertyChanged;
    }

    private async void OnPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(_refreshViewState.IsRefreshing) && _refreshViewState.IsRefreshing)
        {
            await LoadData();
            UpdateUI();
        }
    }

    private async Task LoadData()
    {
        // Simulate asynchronous loading to demonstrate a loading indicator
        forecasts = null; // Clear previous data to show loading state
        UpdateUI();
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
        _refreshViewState.IsRefreshing = false;
    }

    private async void UpdateUI()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _settingsService.OnLanguageChanged -= UpdateUI;
        _settingsService.OnThemeChanged -= UpdateUI;
        _refreshViewState.PropertyChanged -= OnPropertyChanged;
    }
}
