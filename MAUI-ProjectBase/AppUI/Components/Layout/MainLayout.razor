@inherits LayoutComponentBase

<link rel="stylesheet" href="css/@(_appSettings.Skin).css" />

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <select class="form-control" @onchange="@(async (e) => _settingsService.ChangeSkin(e.Value.ToString()))">
                @foreach (AppSkinModel skin in availableSkins)
                {
                    <option value="@skin.Name" selected="@(_appSettings.Skin == skin.Name)">
                        @skin.Name
                    </option>
                }
            </select>
            <img src="assets/images/language/@(_settingsService._currentLanguage.LanguageFlag)" />
            <select class="form-control" @onchange="@(async (e) => _settingsService.ChangeLanguage(e.Value.ToString()))">
                @foreach (AppLanguageModel language in availableLanguages)
                {
                    <option value="@language.LanguageCode" selected="@(_settingsService._currentLanguage.LanguageCode == language.LanguageCode)">
                        @language.LanguageCode
                    </option>
                }
            </select>
            <button @onclick="@(async () => await LogOut())" class="btn">Disconnect</button>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<script src="js/MainLayout.js"></script>

@code {
    private List<AppLanguageModel> availableLanguages => _settingsService.AvailableLanguages();
    private List<AppSkinModel> availableSkins => _settingsService.AvailableSkins();

    private async Task LogOut()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)_authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null);
    }

    protected override void OnInitialized()
    {
        _settingsService.OnLanguageChanged += UpdateUI;
        _settingsService.OnSkinChanged += UpdateUI;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _jsRuntime.InvokeVoidAsync("preventF5");
        }
    }

    private async void UpdateUI()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _settingsService.OnLanguageChanged -= UpdateUI;
        _settingsService.OnSkinChanged -= UpdateUI;
    }
}